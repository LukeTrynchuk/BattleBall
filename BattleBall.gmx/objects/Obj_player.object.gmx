<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Description
/*
        This is the player object. The player object is what the 
    user will be controlling. The player will shoot, run, jump
    and dash. The player will be created by the Obj_Game along
    with multiple other player objects.
    
        The player object is responsible for keeping track of
    it's gun mechanics and animations.

*/


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set general movement variables
spd = 1;                           //Speed player moves at

//Jumping Variables
IsJumping = false;                 //Player is not jumping when created
//JumpingPower = -500;               //Assign the power of the players jump, (Maybe different for different classes)
NumOfJumps = 0;                    //Just counter how many times the player jumps
JumpingPowerY = -1000;             //Assign the power of the players jump, (Maybe different for different classes)
CanJump = true;                    //Boolean to determine if the player is aloud to jump
ConsecutiveJumps = 2;              //Double jump(Maybe different for different classes, should alter JumpingPower if altering ConsecutiveJumps)

SolidContactLastFrame = false;
SolidContactThisFrame = false;

Can_Play_Metal_Sound = true;
Metal_Sound_Time = room_speed * 0.15;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dashing variables
dash_amount = 450;                 //How far the player dashes(Force Applied)
dash_cool_down = room_speed * 0.66;//How often can the player dash
can_dash = true;                   //Boolean to decide if the player is aloud to dash or not, Player can dash when they spawn
is_dashing = false;                //Player is not dashing whe they spawn
dashing_time = 10;                 //How long the player dashes for

smash_attack = false;               //Does the player have the smash attack perk?
isSmashing = true;                  //Is the player currently smashing?
SmashCooldown = room_speed * 1;  //Time till the player can smash again

//Dash cool down
drawhalf = false;
drawhalf1 = false;
drawhalf2 = false;
drawhalf3 = false;
drawall = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player state variables
state = Move;                      //Move

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shooting variables

canShoot = false;                               //Player is not aloud to shoot when they spawn

//Rate of fires
Rate_Of_Fire_Pistol = .33 * room_speed;         //Rate of fire pistol
Rate_Of_Fire_MachineGun = .165 * room_speed;    //Rate of fire machinegun
Rate_Of_Fire_MiniGun = .0667 * room_speed;      //Rate of fire minigun
Rate_Of_Fire_Sniper = 2 * room_speed;           //Rate of fire sniper
Rate_Of_Fire_Rocket = 2.5 * room_speed;         //Rate of fire rocket                                          
                  
//Set the kick backs of each gun
MachineGunKickBack = 40;                        //How much kickback the machine gun gives
PistolGunKickBack = 45;                         //How much kickback the pistol gives
MinigunKickBack = 35;                           //How much kickback the minigun gives
SniperKickBack = 800;                           //How much kickback the sniper gives
RocketKickBack = 1000;                          //How much kickback the rocket gives

//Set alarm and gun to start with
alarm[0] = Rate_Of_Fire_Pistol;                //Set rate of fire
ShotKickBack = PistolGunKickBack;              //Assigning the players current kickback

//Charge up shot
CurrentCharge = 0;                              //The current charge of the powerup shot
MaxCharge = 1;                                  //The maximum charge for the shot
ChargeSpeed = 2 / (room_speed * 3);             //The speed at which the player charges up by
CreatedChargeParticles = false;

MinigunSoundCounter = 8;                    //This variable makes sure that we don't play the minigun sfx too often.
                                                //NOTE: The current minigun sfx we are using has multiple shot sounds
                                                //in it. We don't want to overlay the minigun sfx on top of itself every
                                                //time we make a shot with the minigun. This will slow the system down
                                                //and make it not sound good. This may be changed and not used if we 
                                                //change to a sfx that does not have multiple shots in it. I used 
                                                //8 because I found that 8 was a good time to make it sound seamless.
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Grenade variables
CanThrowGrenade = true;
GrenadeAlarmTime = room_speed * 5;
GrenadesLeft = 2;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Other generic variables
audio_em = audio_emitter_create();          //This is for everything else
audio_s = audio_emitter_create();           //This is for shooting sounds

gp_id = 0;                                  //Gamepad Id Number

phy_fixed_rotation = true;                  //Restrict the player from rotating

playerNum = 0;                              //Which player is this player?

myID = instance_id;
hasPerks = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sound variables
LandSoundCounter = 0;
LandSoundTime = room_speed * 0.15;

isPlayingWalkingSound = false;

PlayedChargeupSound = false;
PlayedPrechargeSound = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player is dead
audio_emitter_free(audio_em);
audio_emitter_free(audio_s);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Can_Play_Metal_Sound = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Smash alarm
isSmashing = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Grenade alarm
CanThrowGrenade = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drawall = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drawhalf2 = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drawhalf1 = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drawhalf = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Is Dashing alarm
is_dashing = false;         //The player is not currently dashing anymore
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dash cool down
can_dash = true;
drawhalf = false;
drawhalf1= false;
drawhalf2 = false;
drawhalf3 = false;
drawall = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///rate of fire
canShoot = true;            //The player can now shoot again
hasShot = false;            //The player has not shot
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Execute State
GetInput();                                 //Get the input from the game pad or keyboard
script_execute(state);                      //Execute the script that correcsponds with the current player
                                                //state. This is a common way in game maker to do states.
                                                //Think of this as enum switching. Currently the player only
                                                //has one state (Movement) other states could be added quite easily.
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animate
Player_Animate();               //Animate the player
                                    //NOTE: Check the Player_Animate() script
                                    //to see the code.
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shoot

if(right_trigger &amp;&amp; canShoot)                                                                                           //If the player has hit the right trigger and is allowed to shoot
{
    var inst;                                                                                                           //Create a local variable called inst to hold the instance ID of the 
                                                                                                                            //created bullet.
                                                                                                                            //NOTE: Local variables in GML MUST begin with the var keyword
     if ( phy_position_x &lt; room_width/4 &amp;&amp; phy_position_x &lt; room_width/2)
        {
        audio_emitter_position(audio_s, 300, y, 0);
        }
        else if ( phy_position_x &lt; room_width/2)
        {
        audio_emitter_position(audio_s, 100, y, 0);
        }
        if ( phy_position_x &gt; room_width/4 &amp;&amp; phy_position_x &gt; room_width/2)
        {
        audio_emitter_position(audio_s, -500, y, 0);
        }
        else if ( phy_position_x &gt; room_width/2)
        {
        audio_emitter_position(audio_s, -100, y, 0);
        }                                                                                                                       
                                        
    var myGun = global.Class_Gun[global.Current_Class];                                                              
    if(myGun == "Pistol")                                                                                  //If the current gun type is pistol
    {
        inst = instance_create(phy_position_x + 45 * image_xscale, phy_position_y, Obj_Bullet);                         //Create the bullet
        ShootTimer = Rate_Of_Fire_Pistol;                                                                               //Set the bullet timer (rate of fire)
        audio_play_sound_on(audio_s, hand_gun, false, 1);
        ShotKickBack = PistolGunKickBack;                                                                               //Set the kickback
    }
    else if (myGun == "MachineGun")                                                                        //If the current gun type is machine gun
    {
        inst = instance_create(phy_position_x + 45 * image_xscale, phy_position_y, Obj_MachineGun_Bullet);              //Create the bullet
        ShootTimer = Rate_Of_Fire_MachineGun;                                                                           //Set the shootTimer ( rate of fire)
        audio_play_sound_on(audio_s, machine_gun, false, 1);
        ShotKickBack = MachineGunKickBack;                                                                              //Set the kickback
    }
    else if (myGun == "Minigun")                                                                           //If the current gun type is Minigun
    {
        inst = instance_create(phy_position_x + 45 * image_xscale, phy_position_y, Obj_Minigun_Bullet);                 //Create three minigun bullets
        var inst2 = instance_create(phy_position_x + 45 * image_xscale, phy_position_y, Obj_Minigun_Bullet);
        var inst3 = instance_create(phy_position_x + 45 * image_xscale, phy_position_y, Obj_Minigun_Bullet);
        
        with(inst2) dir = other.image_xscale;                                                                           //Set the image_xscale of the two other bullets
        with(inst3) dir = other.image_xscale;
        
        ShootTimer = Rate_Of_Fire_MiniGun;                                                                              //Set the shoot timer (rate of fire)
        MinigunSoundCounter++;                                                                                          //Increment the minigun sound counter
        
        if(MinigunSoundCounter &gt;= 4)                                                                                    //If the counter is greater than 4 (I found that 4 frames sounded seamless)
        {
            audio_play_sound_on(audio_s, mini_gun, false, 1);
            MinigunSoundCounter = 0;                                                                                    //Reset the counter
        }
        ShotKickBack = MinigunKickBack;                                                                                 //Set the kickback
    }
     else if (myGun == "Sniper")
    {
        inst = instance_create(phy_position_x + 45 * image_xscale, phy_position_y, Obj_Sniper_Bullet);                  //Create the sniper bullet
        ShootTimer = Rate_Of_Fire_Sniper;                                                                               //Set the shoot timer (rate of fire)
        audio_play_sound_on(audio_s, sniper_shot, false, 1); 
        ShotKickBack = SniperKickBack;                                                                                  //Set the kickback
    }
    else if(BulletType == "Rocket")                                                                                  //If the current gun type is pistol
    {
        inst = instance_create(phy_position_x + 45 * image_xscale, phy_position_y, Obj_Rocket_Bullet);                  //Create the bullet
        ShootTimer = Rate_Of_Fire_Rocket;                                                                               //Set the bullet timer (rate of fire)
        PlayGunShotSound(WEAPON_GUNSHOT_ShotGun_01);                                                                    //Play the gun shot pertaining to the pistol
        ShotKickBack = RocketKickBack;                                                                                  //Set the kickback
    }
    
    instance_create(phy_position_x + 45 * image_xscale, phy_position_y, Obj_MuzzleFlashEffect);                         //Create a muzzle flash effect
    Create_Bullet_Shell();                                                                                              //Create a bullet shell
    
    with(inst)                                                                                                          //Set the image_xscale of the bullet instance
    {
        playerID = other.myID;
        dir = other.image_xscale;
        image_xscale = other.image_xscale;
    }
    
    canShoot = false;                                                                                                   //The player cannot shoot again
    alarm[0] = ShootTimer;                                                                                              //Set the alarm to the shoot timer
    
    CurrentCharge = 0;                                                                                                  //We want to reset the charge for the power up shot to 0
    
    physics_apply_impulse(phy_position_x, phy_position_y,-image_xscale * ShotKickBack,0);                               //Apply the impulse of the gun kickback
    Shake_Screen(0.5);                                                                                                  //Shake the screen
                                                                                                                            //NOTE: I used a value of 0.5 which doesn't actually affect anything
                                                                                                                                //The lowest amount that can be passed in is a value of 1, however I felt
                                                                                                                                //That will high rate of fire weapons caused the effect to stack on top
                                                                                                                                //of itself with every shot and that the effect was too much for every shot.
                                                                                                                                //We could possible replace this piece of juice with vibrating the controller
                                                                                                                                //a slight amount.
}
else if (left_trigger)
{
    
    if(CurrentCharge &lt; MaxCharge)
    {
        if(!PlayedPrechargeSound &amp;&amp; place_meeting(x,y+1,Obj_Solid))
        {
            audio_emitter_pitch(audio_em,random_range(0.8,1.2));
            audio_emitter_gain(audio_em, 0.1);
            audio_play_sound_on(audio_em, snd_precharge, false,2);
            PlayedPrechargeSound = true;
        }
    
        if(!CreatedChargeParticles &amp;&amp; PlayedPrechargeSound)
        {
        
            partInst = instance_create(x,y,Obj_Charge_eff_em);
            with(partInst)
            {
                if(other.playerNum == 2)
                {
                    myPlayer = global.player2;
                }
            }
            
            CreatedChargeParticles = true;
        }
        
        gamepad_set_vibration(gp_id, CurrentCharge, CurrentCharge);                                                      //Set the gamepad vibration    
    }
    else
    {
        CurrentCharge = MaxCharge;                                                                                       //Clamp the charge to the max charge
        gamepad_set_vibration(gp_id, CurrentCharge, CurrentCharge);                                                      //Set the gamepad vibration 
        instance_create(x,y,Obj_Sparkles_Effect);                                                                        //Create some sort of effect   
        
        
        
        if(!PlayedChargeupSound)
        {
            audio_emitter_pitch(audio_em,random_range(0.8,1.2));
            audio_emitter_gain(audio_em, 0.1);
            audio_play_sound_on(audio_em, snd_powerup2, false,2);
            PlayedChargeupSound = true;
        }
    }
    CurrentCharge += ChargeSpeed;                                                                                        //Increase the charge  speed
}
else
{
    CurrentCharge -= ChargeSpeed;                                                                                                   //Reset the charge
    if(PlayedPrechargeSound)
    {
        PlayedPrechargeSound = false;
        CreatedChargeParticles = false;
    }
    gamepad_set_vibration(gp_id, 0,0);                                                                                   //Reset the vibration
}










</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dash
if (dash &amp;&amp; can_dash &amp;&amp; (axis_lh || axis_lv))                                               //If the player has hit the dash button, can dash and is aiming with the left joystick in some direction.
{

    ResetCharge();                                                                          //Reset the charge

    var xamount, yamount;                                                                   //The amount for the x and y to move by
    if(axis_left)                                                                           //If the left joystick is pointing to the left
    {
        xamount = -axis_left;                                                               //Set the x amount appropriately
    }    
    else
    {
        xamount = axis_right;                                                               //Set the x amount appropriately
    }
    
    if(axis_up)                                                                             //If the left joystick is pointing up
    {
        yamount = -axis_up;                                                                 //Set the y amount appropriately
    }
    else
    {
        yamount = axis_down;                                                                //Set the y amount appropriately
    }
    
    physics_apply_impulse(x,y, xamount * dash_amount, yamount * dash_amount);               //apply the dash physics impulse
    
    alarm[1] = dash_cool_down;                                                              //Set the dash cool down timer for the player
    drawall = false;
    can_dash = false;                                                                       //The player cannot dash again
    is_dashing = true;                                                                      //The player is currently dashing
    alarm[2] = dashing_time;   
    alarm[3] = room_speed * .165;
    alarm[4] = alarm[3] + 10;
    alarm[5] = alarm[4] + 10;
    alarm[6] = alarm[5] + 10;                                                             //Set the timer for the currenly dashing (used for dash effect)
    
    if(smash_attack &amp;&amp; !isSmashing &amp;&amp; vaxis &gt;= 0.7)
    {
        isSmashing = true;
        alarm[8] = SmashCooldown;
        
        audio_emitter_pitch(audio_em,random_range(0.5,1.4));                                    //Set audio_em and play the dash effect
        audio_emitter_gain(audio_em, random_range(0.3, 0.6));
        audio_play_sound_on(audio_em, snd_powerup1, false,3);
    }
    else
    {
        audio_emitter_pitch(audio_em,random_range(0.5,1.4));                                    //Set audio_em and play the dash effect
        audio_emitter_gain(audio_em, random_range(0.3, 0.6));
        audio_play_sound_on(audio_em, SWIPE_Whoosh_02, false,3);
    }
    
}
else if (!can_dash &amp;&amp; is_dashing)                                                           //If the player can't dash and is dashing
{
    if(playerNum == 1)
    {
        Create_Dash_Effect("Red");                                                                   //Create the dash effect
    }
    else if (playerNum == 2)
    {
        Create_Dash_Effect("Blue");
    }
}

if(isSmashing)
{
    instance_create(x,y,Obj_Sparkles_Effect);

    if(!is_dashing)
    {
        isSmashing = false;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///TESTING - Change weapon
//NOTE: This script is temporary and is only meant for testing
    //the different types of guns while in development.
if(keyboard_check(vk_numpad1)) global.Bullet_Type = "Pistol";
if(keyboard_check(vk_numpad2)) global.Bullet_Type = "MachineGun";
if(keyboard_check(vk_numpad3)) global.Bullet_Type = "Minigun";
if(keyboard_check(vk_numpad4)) global.Bullet_Type = "Sniper";
if(keyboard_check(vk_numpad5)) global.Bullet_Type = "Rocket";  
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Grenades
if(left_bumper &amp;&amp; CanThrowGrenade &amp;&amp; GrenadesLeft &gt; 0)
{
    var inst = instance_create(x,y,Obj_Grenade);
    with(inst)
    {
        physics_apply_impulse(phy_position_x, phy_position_y, other.image_xscale * 50, 20);
    }
    CanThrowGrenade = false;
    alarm[7] = GrenadeAlarmTime;
    GrenadesLeft--;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Perks
if(!hasPerks)
{
    for(var CurrentPerk = 0; CurrentPerk &lt; 2; CurrentPerk++)
    {
        switch(global.Class_Perk[global.Current_Class * 2  + CurrentPerk])
        {
        case "TripleJumpPerk" :                //Triple Jump
            ConsecutiveJumps = 3;
            break;
        case "RateOfFirePerk" :                //Rate of fire (x.75)
            Rate_Of_Fire_Pistol *= 0.75;
            Rate_Of_Fire_MachineGun *= 0.75;
            Rate_Of_Fire_MiniGun *= 0.75;
            Rate_Of_Fire_Sniper *= 0.75;
            break;
        case "ExtraExplosivePerk" :                //Extra Explosive
            GrenadesLeft++;
            break;
        case "DashCooldownPerk" :                //Dash cool down (x.75)
            dash_cool_down *= .75;
            break;
        case "SmashPerk" :                //Smash attack
            smash_attack = true;
            break;
            
        }
    }
    hasPerks = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sound stuff
LandSoundCounter++;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Obj_Slope">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Slope
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Obj_Gun_Crate">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collect Gun Crate
with(other)
{
    instance_destroy();
}

var GunType = random_range(1,4);

if(GunType == 1)
{
    if(playerNum == 1) global.Player1Gun = "Pistol";
    if(playerNum == 2) global.Player2Gun = "Pistol";
    
}
else if(GunType == 2)
{
    if(playerNum == 1) global.Player1Gun = "MachineGun";
    if(playerNum == 2) global.Player2Gun = "MachineGun";
}
else if (GunType == 3)
{
    MinigunSoundCounter = 8;
    if(playerNum == 1) global.Player1Gun = "Minigun";
    if(playerNum == 2) global.Player2Gun = "Minigun";
}
else
{
    if(playerNum == 1) global.Player1Gun = "Sniper";
    if(playerNum == 2) global.Player2Gun = "Sniper";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Obj_Solid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Checking for Collision
if(is_dashing)
{
    is_dashing = false;
}

if(isSmashing)
{
    global.Explosion = instance_create(x,y, Obj_Explosion);
    with(global.Explosion)
    {
        detonate = true;
    }
    Create_Explosion_eff();
        
    isSmashing = false;
    isDashing = false;
}


if(other.y &gt; y &amp;&amp; (IsJumping  || (y &gt; yprevious &amp;&amp; (SolidContactThisFrame &amp;&amp; !SolidContactLastFrame))))
{
    instance_create(x,y+18,Obj_Dust_Land);
    IsJumping = false;
        
    if(LandSoundCounter &gt;= LandSoundTime)
    {
        audio_emitter_position(audio_em,0,0,0);
        audio_emitter_pitch(audio_em,random_range(0.8,1.2));
        audio_emitter_gain(audio_em, 0.05);
        audio_play_sound_on(audio_em, Land_on_ground_2, false,2);
        LandSoundCounter = 0;
    }
    
    NumOfJumps = 0;
}
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Obj_Ball">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Colision with ball

if(other.y &gt; y &amp;&amp; (IsJumping  || (y &gt; yprevious &amp;&amp; (SolidContactThisFrame &amp;&amp; !SolidContactLastFrame))))
{
    instance_create(x,y+18,Obj_Dust_Land);
    IsJumping = false;
        
    if(LandSoundCounter &gt;= LandSoundTime)
    {
        audio_emitter_position(audio_em,0,0,0);
        audio_emitter_pitch(audio_em,random_range(0.8,1.2));
        audio_emitter_gain(audio_em, 0.05);
        audio_play_sound_on(audio_em, Land_on_ground_2, false,2);
        LandSoundCounter = 0;
    }
    
    NumOfJumps = 0;
}
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if (drawhalf)
{
draw_sprite_part(dash_cooldown, 0, 0, 0, 3, sprite_height, 700,700);
}
if (drawhalf1)
{
draw_sprite_part(dash_cooldown, 0, 0, 0, 6, sprite_height, 700,700);
}
if (drawhalf2)
{
draw_sprite_part(dash_cooldown, 0, 0, 0, 9, sprite_height, 700,700);
}
if (drawhalf3)
{
draw_sprite_part(dash_cooldown, 0, 0, 0, 12, sprite_height, 700,700);
}
if(drawall)
{
draw_sprite_part(dash_cooldown, 0, 0, 0, 16, sprite_height, 700,700);
}

if(playerNum == 1)
{
    draw_sprite_ext(Player1_ID, 0,x,y - 40,1.5,1.5,0,c_white,1);
}
else if (playerNum == 2)
{
    draw_sprite_ext(Player2_ID, 0,x, y - 40, 1.5,1.5,0,c_white,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>2</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>1</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>1</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>28,0</point>
    <point>28,36</point>
    <point>0,36</point>
  </PhysicsShapePoints>
</object>
