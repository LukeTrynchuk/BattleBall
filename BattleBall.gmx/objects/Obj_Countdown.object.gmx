<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize the countdown
instance_create(x,y,Obj_Background_Music);

mySprite = noone;
mySpriteLeft = noone;
mySpriteRight = noone;

Countdown_Counter = 0;

Stage_Time = room_speed;
alarm[0] = Stage_Time;

audio_em = audio_emitter_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x,y,Obj_Game);
instance_create(x,y,Obj_Game_Timer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarm for the next stage
Countdown_Counter++;
switch(Countdown_Counter)
{
    case 0:
        break;
    case 1:
        mySpriteLeft = Glitch_3_2;
        mySprite = Glitch_3_1;
        mySpriteRight = Glitch_3_3;
        break;
    case 2:
        mySpriteLeft = Glitch_2_2;
        mySprite = Glitch_2_1;
        mySpriteRight = Glitch_2_3;
        break;
    case 3:
        mySpriteLeft = Glitch_1_2;
        mySprite = Glitch_1_1;
        mySpriteRight = Glitch_1_3;
        break;
    case 4:
        mySpriteLeft = Glitch_Battle_2;
        mySprite = Glitch_Battle_1;
        mySpriteRight = Glitch_Battle_3;
        break;
    case 5:
        instance_destroy();
        break;
}
alarm[0] = Stage_Time;

if(Countdown_Counter &gt; 0 &amp;&amp; Countdown_Counter &lt; 4)
{
    Playhit(GAME_COUNTDOWN, audio_em);
}
else if (Countdown_Counter == 4)
{
    Playhit(GAME_COUNTDOWN_BATTLE, audio_em);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(Top_Banner, 0, 0, room_height / 2 - 200, room_width, 400, 0, c_white, 1);

if(Countdown_Counter != 0)
{
    var angle = 0;
    switch(Countdown_Counter)
    {
        case 1:
            angle = 2;
            break;
        case 2:
            angle = 4;
            break;
        case 3:
            angle = 6;
            break;
        case 4:
            angle = 4;
            break;
    }
    
    var move_amount = 5;
    var x_move = random_range(-move_amount, move_amount);
    var y_move = random_range(-move_amount, move_amount);
    var rotate  = random_range(-angle, angle);
    
    draw_sprite_ext(mySpriteLeft, 0, room_width / 2 + x_move - random_range(4, 14), room_height / 2 + y_move, 1,1, rotate, c_white, 1); 
    draw_sprite_ext(mySpriteRight, 0, room_width / 2 + x_move + random_range(4,14), room_height / 2 + y_move, 1,1,rotate, c_white, 1);
        draw_sprite_ext(mySprite, 0, room_width / 2 + x_move, room_height / 2 + y_move, 1,1,rotate,c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
