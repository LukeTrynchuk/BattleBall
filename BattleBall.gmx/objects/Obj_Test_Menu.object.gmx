<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///General variables

x = room_width / 3 - 160;                                                           //Set the x position
y = room_height / 3 - 50;                                                           //Set the y position

gp_id = 0;                                                                          //The gamepad id (0 for default, first gamepad connected)

SpriteWidth = 70;                                                                   //The width of the graphic for each class
SpriteHeight = 70;                                                                  //The height of the graphic for each class

ControlScale = 0.3;                                                                 //For scaling

Version = "11.06.16";                                                               //The current version build

audio_em = audio_emitter_create();                                                  //Create our audio emitter object

PlayerName = "Gene Fowler";                                                         //This will be replaced eventually by requesting the username of
                                                                                        //the user depending on the platform (Steam, PSN, Xbox Live).
                                                                                        
SniperExp = 123;                                                                    //Arbitrary for now, just to show that it will be implemented later.
PistolExp = 348;
MachinegunExp = 50;
MinigunExp = 230;

global.Player1Gun = "Pistol";
global.Player2Gun = "Pistol";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State variables
enum ChoosingMode_TEST                                                                   //This is the choosing mode 
{
    CLASS,
    PERK,
    FIGHT
};

enum PlayerChoosing_TEST                                                                 //Which player is choosing?
{
    PLAYER_1,
    PLAYER_2
}

myPlayer_Choosing = PlayerChoosing_TEST.PLAYER_1;                                        //Set the player choosing state
myChoosing_State = ChoosingMode_TEST.CLASS;                                              //Set the current selecting type

myMenuMode = MM_MAIN;                                                              //Set the current menu mode
                                                                                        //MM_MAIN
                                                                                        //MM_CHOOSE_CLASS
                                                                                        //MM_EDIT_CLASS
                                                                                        //MM_CHANGE_ITEM
                                                                                        //MM_GAME_TYPE
                                                                                        
myDrawMode = MM_MAIN_DRAW;                                                          //Set the current draw mode
                                                                                        //MM_MAIN_DRAW
                                                                                        //MM_CHOOSE_CLASS_DRAW
                                                                                        //MM_EDIT_CLASS_DRAW
                                                                                        //MM_CHANGE_ITEM_DRAW
                                                                                        //MM_GAME_TYPE_DRAW
                                                                                        
//Player stuff
global.Player1Gun = "Pistol";                                                       //What the first player will currently be using
global.Player2Gun = "Pistol";                                                       //What the second player will currently be using

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Background effects variables

Gradient_Time = room_speed * 15;                                                        //This is how long it will take to do a full cycle
Gradient_Full_Effect = 0.3;                                                             //How much will the gradient change by?
Gradient_Base_Level = 0.4;                                                              //The base or highest that the gradients will show
Gradient_Time_Offset = 0.5;                                                             //The offset of the two gradients

Blue_Grad_Alpha = Gradient_Base_Level;                                                  //Set the blue gradient alpha
Red_Grad_Alpha = Gradient_Base_Level - Gradient_Full_Effect * Gradient_Time_Offset;     //Set the red gradient alpha

Blue_Grad_Dir = -1;
Red_Grad_Dir = 1;

alarm[1] = Gradient_Time;                                                               //Set the timer for the blue gradient
alarm[2] = Gradient_Time * (1.0 - Gradient_Time_Offset);                                 //Set the timer for the red gradient

//Particles ------------------ left side travelling right

///Initialize particle
sparks = part_system_create();                          //Create our particle system
part_system_depth(sparks, 20);                          //Set the depth of the object (draw order, a depth of -1 will be drawn after a depth of 1)

//create a snow flake particle
individual_spark = part_type_create();                  //Create a particle - Basic settings
part_type_sprite(individual_spark, Blue_Spark, false, false, false); 
part_type_orientation(individual_spark,0,0,0,0,1);         //Effects angle
part_type_size(individual_spark, 0.5, 1,0,random_range(0.9,1.1));          //Effects size
part_type_speed(individual_spark, 5,10,-0.05, random_range(1,3));          //Effects speed
part_type_direction(individual_spark, random_range(0, 45) - 25,random_range(0,90) - 45,random_range(-10,10),random_range(-10,10));        //Effects direction
part_type_life(individual_spark,room_speed * 8,room_speed * 16);                  //Effects lifetime
part_type_alpha3(individual_spark, 1, .7,0);
part_type_gravity(individual_spark, 0.1, 90);



//Create sparks
sparks_emitter = part_emitter_create(sparks);           //Create the emitter
part_emitter_region(sparks, sparks_emitter, 0, 0,0,room_width,ps_shape_rectangle,ps_distr_linear);      //region to stream particles from
part_emitter_stream(sparks,sparks_emitter,individual_spark, -20);


//Particles ------------------ right side travelling left

///Initialize particle
sparks2 = part_system_create();                          //Create our particle system
part_system_depth(sparks, 20);                          //Set the depth of the object (draw order, a depth of -1 will be drawn after a depth of 1)

//create a snow flake particle
individual_spark2 = part_type_create();                  //Create a particle - Basic settings
part_type_sprite(individual_spark2, Red_Spark, false, false, false); 
part_type_orientation(individual_spark2,0,0,0,0,1);         //Effects angle
part_type_size(individual_spark2, 0.5, 1,0,random_range(0.9,1.1));          //Effects size
part_type_speed(individual_spark2, 5,10,-0.05, random_range(1,3));          //Effects speed
part_type_direction(individual_spark2, random_range(180, 225) - 25,random_range(180,270) - 45,random_range(-2,2),random_range(-2,2));        //Effects direction
part_type_life(individual_spark2,room_speed * 8,room_speed * 16);                  //Effects lifetime
part_type_alpha3(individual_spark2, 1, .7,0);
part_type_gravity(individual_spark2, 0.1, 90);



//Create sparks
sparks_emitter2 = part_emitter_create(sparks2);           //Create the emitter
part_emitter_region(sparks2, sparks_emitter2, room_width, room_width,0,room_width,ps_shape_rectangle,ps_distr_linear);      //region to stream particles from
part_emitter_stream(sparks2,sparks_emitter2,individual_spark2, -20);



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Class arrays

CurrentClass = 0;                                                                   //Which class is currently selected?
ClassOpacity = InitOpacity(4,0.5,CurrentClass);                                         //1. Pistol
                                                                                        //2. Machine Gun
                                                                                        //3. Minigun
                                                                                        //4. Sniper
                                          
TotalNumPerks = 6;                                                                  //The total number of perks available
CurrentPerk = -1;                                                                   //-1 because we don't want to be choosing a perk yet. Pick the class first.
PerkOpacity = InitOpacity(TotalNumPerks,0.3,CurrentPerk);                           //Set the perk opacity
               
            
PerksLeft = 2;                                                                      //The number of allowed perks
for(var CurrentPerk = 0; CurrentPerk &lt; TotalNumPerks; CurrentPerk++)                //Set the chosen perks array
{
    global.ChosenPerks[CurrentPerk] = false;
}
    
for(var CurrentPerk = 0; CurrentPerk &lt; TotalNumPerks; CurrentPerk++)                //Set the Player 2 chosen perks array
{
    global.ChosenPerksP2[CurrentPerk] = false;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display objects and variables

CanSwitchClass = true;                                                              //Can the player switch classes again? or other options?
SwitchTimer = room_speed * 0.15;                                                    //The time between switches

//DisplayInst = instance_create(room_width * 0.83 , y, Obj_ClassPlayer);              //The big player sprite object on the side

//MovementInst = instance_create(room_width * 0.78, y + 125,Obj_Bar);                 //The movement bar object
//PowerInst = instance_create(room_width * 0.78, y + 150, Obj_Bar);                   //The power bar object
//RateOfFireInst = instance_create(room_width * 0.78, y+175, Obj_Bar);                //The rate of fire object
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MM_MENU variables
MM_MENU_OPTIONS [0] = "Play Game";          //The first option
MM_MENU_OPTIONS[1] = "Edit Class";          //The second option
MM_MENU_OPTIONS[2] = "QUIT";                //The third option

Current_Selected_Option = 0;                //This is the current selected option available

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MM_CHOOSE_CLASS variables

myClasses[0] = "Pistol";
myClasses[1] = "Machine_Gun";
myClasses[2] = "Minigun";
myClasses[3] = "Sniper";

Current_Class_Option = 0;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MM_MENU_EDIT_CLASS variables
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MM_GAME_TYPE variables
Game_Type_Options[0] = "LAN 1v1";

Current_Option = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_system_destroy(sparks);
part_system_destroy(sparks2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set values for the red gradient
alarm[2] = Gradient_Time;
if(Red_Grad_Dir == 1)
{
    Red_Grad_Dir = -1;
    Red_Grad_Alpha = Gradient_Base_Level;
}
else
{
    Red_Grad_Dir = 1;
    Red_Grad_Alpha = Gradient_Base_Level - Gradient_Full_Effect;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set values for the blue gradient
alarm[1] = Gradient_Time;
if(Blue_Grad_Dir == 1)
{
     Blue_Grad_Dir = -1;
     Blue_Grad_Alpha = Gradient_Base_Level;
}
else
{
    Blue_Grad_Dir = 1;
    Blue_Grad_Alpha = Gradient_Base_Level - Gradient_Full_Effect;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Timer for switching between classes
CanSwitchClass = true;          //The player can now switch classes again.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Allow player change between classes
/*
GetClassInput();                                             //Get the users input

//Class opacities
if(myChoosing_State == ChoosingMode.CLASS)
{
    ClassOpacity[CurrentClass] = 0.5;
    CurrentClass = SetOpacityIndex(array_length_1d(ClassOpacity),CurrentClass);                      //Set the class opacities
    ClassOpacity[CurrentClass] = 1.0;
    SetBars();
}
else if (myChoosing_State == ChoosingMode.PERK)
{
    PerkOpacity[CurrentPerk] = 0.5;
    CurrentPerk = SetOpacityIndex(array_length_1d(PerkOpacity),CurrentPerk);                        //Set the perk opacities
    FindValidPerk();                                                                                //Will loop till finds valid perk
    PerkOpacity[CurrentPerk] = 1.0;
}



if(confirm &amp;&amp; CanSwitchClass)
{
    CanSwitchClass = false;
    alarm[0] = SwitchTimer;

    if(myChoosing_State == ChoosingMode.CLASS)
    {
        SwitchPlayerGun();
    
        ChangeWeapon();
        
        CurrentPerk = 0;
        myChoosing_State = ChoosingMode.PERK;
        ClassOpacity = SetValues(ClassOpacity, 0.1);
        ClassOpacity[CurrentClass] = 0.8;
        SetDisplayGun();
        
        audio_emitter_pitch(audio_em,random_range(0.95,1.05));
        audio_emitter_gain(audio_em, 0.05);
        audio_play_sound_on(audio_em, snd_classSwitch, false,2);

    }
    else if (myChoosing_State == ChoosingMode.PERK)
    {       
        PerksLeft--;
        if(myPlayer_Choosing = PlayerChoosing.PLAYER_1) global.ChosenPerks[CurrentPerk] = true;
        if(myPlayer_Choosing = PlayerChoosing.PLAYER_2) global.ChosenPerksP2[CurrentPerk] = true;
        FindValidPerk();
        
        audio_emitter_pitch(audio_em,random_range(0.95,1.05));
        audio_emitter_gain(audio_em, 0.05);
        audio_play_sound_on(audio_em, snd_perkSwitch, false,2);

        
        if(PerksLeft == 0) myChoosing_State = ChoosingMode.FIGHT;                                                                              //Go to the next room
    }
    else if (myChoosing_State == ChoosingMode.FIGHT)
    {
        if(myPlayer_Choosing == PlayerChoosing.PLAYER_1)
        {
            myPlayer_Choosing = PlayerChoosing.PLAYER_2;
            gp_id = 1;
            
            PerksLeft = 2;
            PerkOpacity = SetValues(PerkOpacity,0.5);
            myChoosing_State = ChoosingMode.PERK;
            
            PerkOpacity = SetValues(PerkOpacity,0.1);
            ClassOpacity = SetValues(ClassOpacity,0.5);
        
            PerksLeft = 2;
            ClassOpacity[CurrentClass] = 1.0;
            myChoosing_State = ChoosingMode.CLASS;
            
            with(DisplayInst)
            {
                Gun = noone;
            }
        
            audio_emitter_pitch(audio_em,random_range(0.95,1.05));
            audio_emitter_gain(audio_em, 0.05);
            audio_play_sound_on(audio_em, snd_fight, false,2);
            
        }
        else
        {
            room_goto_next();
        }
    }
}
else if (back &amp;&amp; CanSwitchClass)
{
    CanSwitchClass = false;
    alarm[0] = SwitchTimer;

    if(myChoosing_State = ChoosingMode.PERK)
    {
        with(DisplayInst)
        {
            Gun = noone;
        }
        
        PerkOpacity = SetValues(PerkOpacity,0.1);
        ClassOpacity = SetValues(ClassOpacity,0.5);
        global.ChosenPerks = SetValues(global.ChosenPerks,false);
        
        PerksLeft = 2;
        ClassOpacity[CurrentClass] = 1.0;
        myChoosing_State = ChoosingMode.CLASS;
        
        audio_emitter_pitch(audio_em,random_range(0.95,1.05));
        audio_emitter_gain(audio_em, 0.05);
        audio_play_sound_on(audio_em, snd_cancel, false,2);
    }
    else if (myChoosing_State = ChoosingMode.FIGHT)
    {
        PerksLeft = 2;
        
        if(myPlayer_Choosing == PlayerChoosing.PLAYER_1) global.ChosenPerks = SetValues(global.ChosenPerks,false);
        if(myPlayer_Choosing == PlayerChoosing.PLAYER_2) global.ChosenPerksP2 = SetValues(global.ChosenPerksP2,false);
        
        PerkOpacity = SetValues(PerkOpacity,0.5);
        myChoosing_State = ChoosingMode.PERK;
        
        audio_emitter_pitch(audio_em,random_range(0.95,1.05));
        audio_emitter_gain(audio_em, 0.05);
        audio_play_sound_on(audio_em, snd_cancel, false,2);
    }
    else
    {
        audio_emitter_pitch(audio_em,random_range(0.95,1.05));
        audio_emitter_gain(audio_em, 0.05);
        audio_play_sound_on(audio_em, snd_error, false,2);
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Background effect code
Blue_Grad_Alpha += Blue_Grad_Dir * (Gradient_Full_Effect  / Gradient_Time);
Red_Grad_Alpha += Red_Grad_Dir * (Gradient_Full_Effect  / Gradient_Time);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step based on menu mode
script_execute(myMenuMode);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the different classes

/*
Choose_Class_Font();                                                                            //Change our font

if(myChoosing_State == ChoosingMode.CLASS)
{
    draw_text(x + 20 + SpriteWidth, y - SpriteHeight,"Choose Class");                           //Draw the instructions "Choose Class"
}

draw_sprite_ext(B_Button_360,0,20, room_height - 20,ControlScale,ControlScale,0,c_white,1);     //Draw the B Button graphic
draw_sprite_ext(A_Button_360,0,20, room_height - 50,ControlScale,ControlScale,0,c_white,1);    //Draw the A Button Graphic

draw_text(42,room_height - 30,"Back");                                                          //"Back" for B button
draw_text(42,room_height - 60,"Confirm");                                                      //"Confirm" for A button

draw_sprite_ext(Seperator, 0,x - 25,y + 70,320,3,0,c_white,1);                                       //Draw the seperator between perks and class
draw_sprite_ext(Seperator, 0,room_width / 3 * 2,0,3,room_height,0,c_white,1);               //Draw the seperator between the customization and the stats
draw_sprite_ext(Seperator, 0,room_width / 3 * 2,room_height / 3 * 2,room_width / 3,3,0,c_white,1);               //Draw the seperator between the customization and the stats

//======================================DRAW CLASS ICONS============================================================
draw_sprite_ext(PistolClass,0,x,y,0.7,0.7,0,c_white,ClassOpacity[0]);                                       //Draw class icons
draw_sprite_ext(MachineGunClass,0,x + (1 * SpriteWidth) + 20 * 1,y,0.7,0.7,0,c_white,ClassOpacity[1]);
draw_sprite_ext(MinigunClass,0,x  + (2 * SpriteWidth) + 20 * 2,y,0.7,0.7,0,c_white,ClassOpacity[2]);
draw_sprite_ext(SniperClass,0,x  + (3 * SpriteWidth) + 20 * 3,y,0.7,0.7,0,c_white,ClassOpacity[3]);

//=====================================================DRAW PERK ICONS==================================================================

if(myChoosing_State == ChoosingMode.PERK || myChoosing_State == ChoosingMode.FIGHT) 
{
    draw_sprite_ext(TripleJumpPerk,0,x,y + SpriteHeight + 100,0.7,0.7,0,c_white, PerkOpacity[0]);                                       //Draw perk icons
    draw_sprite_ext(RateOfFirePerk,0,x + (1 * SpriteWidth) + 20 * 1,y + SpriteHeight + 100,0.7,0.7,0,c_white, PerkOpacity[1]);
    draw_sprite_ext(ExtraExplosivePerk,0,x  + (2 * SpriteWidth) + 20 * 2,y + SpriteHeight + 100,0.7,0.7,0,c_white, PerkOpacity[2]);
    draw_sprite_ext(DashCooldownPerk,0,x  + (3 * SpriteWidth) + 20 * 3,y + SpriteHeight + 100,0.7,0.7,0,c_white, PerkOpacity[3]);
    
    draw_sprite_ext(Aim8DirPerk,0,x,y + SpriteHeight + 150 + 40, 0.7,0.7,0,c_white,PerkOpacity[4]);
    draw_sprite_ext(SmashPerk,0,x + (1 * SpriteWidth) + 20 * 1, y + SpriteHeight + 150 + 40, 0.7,0.7,0,c_white,PerkOpacity[5]);
    
    
    draw_text(x + SpriteWidth + 35,y + SpriteHeight + 15,"Perks : " + string(PerksLeft));                                                                                 //Display how many perks left
    
    switch(CurrentClass)
    {
        case 0:
            draw_text(x + 20 + SpriteWidth, y - SpriteHeight,"Class : Light");
            break;
        case 1:
            draw_text(x + 20 + SpriteWidth, y - SpriteHeight,"Class : Gunsman");
            break;
        case 2:
            draw_text(x + 20 + SpriteWidth, y - SpriteHeight,"Class : Heavy");
            break;
        case 3:
            draw_text(x + 20 + SpriteWidth, y - SpriteHeight,"Class : Recon");
            break;
    }
    
    Draw_ChosenPerks();
}

draw_text(room_width / 3 * 2 + 10,y + 108,"Movement :");                                                            //"Back" for B button
draw_text(room_width / 3 * 2 + 10,y + 133,"Power :");                                                               //"Confirm" for A button
draw_text(room_width / 3 * 2 + 10,y + 158,"Fire Rate :");                                                           //"Confirm" for A button

if(myChoosing_State == ChoosingMode.FIGHT)
{
    draw_sprite_ext(Fight,0,room_width / 3,room_height - 40,0.4,0.4,0,c_white, 1);
}
else
{
    draw_sprite_ext(Fight,1,room_width / 3,room_height - 40,0.4,0.4,0,c_white, 1);
}

switch(myPlayer_Choosing)
{
    case PlayerChoosing.PLAYER_1:
        draw_sprite_ext(Player1_Choose, 0, x + 240,y - 60,1,1,0,c_white,1);
        break;
    case PlayerChoosing.PLAYER_2:
        draw_sprite_ext(Player2_Choose, 0,x + 240,y - 60,1,1,0,c_white,1);
        break;
}



*/





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the background effects
draw_sprite_ext(Blue_Grad, 0, room_width / 2, room_height / 2, 1,1,0,c_white, Blue_Grad_Alpha);       //Blue gradient
draw_sprite_ext(Red_Grad, 0, room_width / 2, room_height / 2, 1,1,0,c_white, Red_Grad_Alpha);        //Red gradient
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw based on the different mode
script_execute(myDrawMode);   //Execute the draw event
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
