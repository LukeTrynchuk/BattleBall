<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///General variables

//x = room_width / 3 - 160;                                                           //Set the x position
//y = room_height / 3 - 50;                                                           //Set the y position

gp_id = 0;                                                                          //The gamepad id (0 for default, first gamepad connected)

SpriteWidth = 70;                                                                   //The width of the graphic for each class
SpriteHeight = 70;                                                                  //The height of the graphic for each class

ControlScale = 0.3;                                                                 //For scaling

Version = "11.13.16";                                                               //The current version build

audio_em = audio_emitter_create();                                                  //Create our audio emitter object





//====================================TEMPORARY VARIABLES=============================================
PlayerName = "Gene Fowler";                                                         //This will be replaced eventually by requesting the username of
                                                                                        //the user depending on the platform (Steam, PSN, Xbox Live).
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State variables
myMenuMode = MM_MAIN;                                                              //Set the current menu mode
                                                                                        //MM_MAIN
                                                                                        //MM_CHOOSE_CLASS
                                                                                        //MM_EDIT_CLASS
                                                                                        //MM_CHANGE_ITEM
                                                                                        //MM_GAME_TYPE
                                                                                        //MM_LEVEL_SELECT
                                                                                        
myDrawMode = MM_MAIN_DRAW;                                                          //Set the current draw mode
                                                                                        //MM_MAIN_DRAW
                                                                                        //MM_CHOOSE_CLASS_DRAW
                                                                                        //MM_EDIT_CLASS_DRAW
                                                                                        //MM_CHANGE_ITEM_DRAW
                                                                                        //MM_GAME_TYPE_DRAW 
                                                                                        //MM_LEVEL_SELECT

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Background effects variables

Gradient_Time = room_speed * 15;                                                        //This is how long it will take to do a full cycle
Gradient_Full_Effect = 0.3;                                                             //How much will the gradient change by?
Gradient_Base_Level = 0.4;                                                              //The base or highest that the gradients will show
Gradient_Time_Offset = 0.5;                                                             //The offset of the two gradients

Blue_Grad_Alpha = Gradient_Base_Level;                                                  //Set the blue gradient alpha
Red_Grad_Alpha = Gradient_Base_Level - Gradient_Full_Effect * Gradient_Time_Offset;     //Set the red gradient alpha

Blue_Grad_Dir = -1;
Red_Grad_Dir = 1;

alarm[1] = Gradient_Time;                                                               //Set the timer for the blue gradient
alarm[2] = Gradient_Time * (1.0 - Gradient_Time_Offset);                                 //Set the timer for the red gradient

//Particles ------------------ left side travelling right

///Initialize particle
sparks = part_system_create();                          //Create our particle system
part_system_depth(sparks, 1000);                          //Set the depth of the object (draw order, a depth of -1 will be drawn after a depth of 1)

//create a snow flake particle
individual_spark = part_type_create();                  //Create a particle - Basic settings
part_type_sprite(individual_spark, Blue_Spark, false, false, false); 
part_type_orientation(individual_spark,0,0,0,0,1);         //Effects angle
part_type_size(individual_spark, 0.5, 1,0,random_range(0.9,1.1));          //Effects size
part_type_speed(individual_spark, 5,10,-0.05, random_range(1,3));          //Effects speed
part_type_direction(individual_spark, random_range(0, 45) - 25,random_range(0,90) - 45,random_range(-10,10),random_range(-10,10));        //Effects direction
part_type_life(individual_spark,room_speed * 8,room_speed * 16);                  //Effects lifetime
part_type_alpha3(individual_spark, 1, .7,0);
part_type_gravity(individual_spark, 0.1, 90);



//Create sparks
sparks_emitter = part_emitter_create(sparks);           //Create the emitter
part_emitter_region(sparks, sparks_emitter, 0, 0,0,room_width,ps_shape_rectangle,ps_distr_linear);      //region to stream particles from
part_emitter_stream(sparks,sparks_emitter,individual_spark, -20);


//Particles ------------------ right side travelling left

///Initialize particle
sparks2 = part_system_create();                          //Create our particle system
part_system_depth(sparks2, 1000);                          //Set the depth of the object (draw order, a depth of -1 will be drawn after a depth of 1)

//create a snow flake particle
individual_spark2 = part_type_create();                  //Create a particle - Basic settings
part_type_sprite(individual_spark2, Red_Spark, false, false, false); 
part_type_orientation(individual_spark2,0,0,0,0,1);         //Effects angle
part_type_size(individual_spark2, 0.5, 1,0,random_range(0.9,1.1));          //Effects size
part_type_speed(individual_spark2, 5,10,-0.05, random_range(1,3));          //Effects speed
part_type_direction(individual_spark2, random_range(180, 225) - 25,random_range(180,270) - 45,random_range(-2,2),random_range(-2,2));        //Effects direction
part_type_life(individual_spark2,room_speed * 8,room_speed * 16);                  //Effects lifetime
part_type_alpha3(individual_spark2, 1, .7,0);
part_type_gravity(individual_spark2, 0.1, 90);



//Create sparks
sparks_emitter2 = part_emitter_create(sparks2);           //Create the emitter
part_emitter_region(sparks2, sparks_emitter2, room_width, room_width,0,room_width,ps_shape_rectangle,ps_distr_linear);      //region to stream particles from
part_emitter_stream(sparks2,sparks_emitter2,individual_spark2, -20);



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display objects and variables

CanSwitchClass = true;                                                              //Can the player switch classes again? or other options?
SwitchTimer = room_speed * 0.15;                                                    //The time between switches

//DisplayInst = instance_create(room_width * 0.83 , y, Obj_ClassPlayer);              //The big player sprite object on the side

MovementInst = instance_create(room_width * 0.65, room_height / 3 * 2 + 150,Obj_Bar);                 //The movement bar object
PowerInst = instance_create(room_width * 0.65, room_height / 3 * 2 + 190, Obj_Bar);                   //The power bar object
RateOfFireInst = instance_create(room_width * 0.65, room_height / 3 * 2 + 230, Obj_Bar);                //The rate of fire object

global.ShowGunBars = false;
var b_x = 680;
var b_y = 480;
Gun_PowerInst = instance_create(b_x,b_y,Obj_GunBar);       //The power stat for the gun
Gun_Kickback = instance_create(b_x,b_y + 30,Obj_GunBar);        //The kickback stat for the gun
Gun_Accuracy = instance_create(b_x, b_y + 60, Obj_GunBar);      //The accuracy stat for the gun
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MM_MENU variables
MM_MENU_OPTIONS [0] = "Play Game";          //The first option
MM_MENU_OPTIONS[1] = "Edit Class";          //The second option
MM_MENU_OPTIONS[2] = "QUIT";                //The third option

Current_Selected_Option = 0;                //This is the current selected option available

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MM_CHOOSE_CLASS variables

myClasses[0] = "Pistol";
myClasses[1] = "Machine_Gun";
myClasses[2] = "Minigun";
myClasses[3] = "Sniper";

Current_Class_Option = 0;

global.ShowBars = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MM_GAME_TYPE variables
MM_GAME_TYPES[0] = "LAN 1V1";
Current_Game_Type = 0;

MM_GAME_TYPE_DESCRIPTIONS[0] = 
"Play with your friends is the action packed 
and fast paced 1v1 LAN games. 
 
Note that this game type requires two local controllers.";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MM_MENU_EDIT_CLASS variables

enum EditingType
{
    PERKS
};

myEditingType = EditingType.PERKS;          //Set the current editing type

CurrentPerk = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MM_CHANGE_ITEM variables
CurrentItem = 0;                        //The current item we're highlighting

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MM_LEVEL_SELECT variables
Current_Levels[0] = "42 Clinton St";
Current_Levels[1] = "Old Brick Building";
Current_Levels[2] = "Rundown School";

Level_Pics[0] = Old_Brick_Building;

Option_Spr[0] = Clinton_St_Option;
Option_Spr[1] = Clinton_St_Option_Chosen;
Option_Spr[2] = Old_Brick_Building_Option;
Option_Spr[3] = Old_Brick_Building_Option_Chosen;
Option_Spr[4] = Rundown_School_Option;
Option_Spr[5] = Rundown_School_Option_Chosen;

Selected_Level = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sound variables

audio_em = audio_emitter_create();          //Create our audio emitter
audio_music_em = audio_emitter_create();
audio_play_sound_on(audio_em, MM_Crackle, true, 1);
Play_Background_Music();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_system_destroy(sparks);
part_system_destroy(sparks2);
audio_emitter_free(audio_em);
audio_emitter_free(audio_music_em);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set values for the red gradient
alarm[2] = Gradient_Time;
if(Red_Grad_Dir == 1)
{
    Red_Grad_Dir = -1;
    Red_Grad_Alpha = Gradient_Base_Level;
}
else
{
    Red_Grad_Dir = 1;
    Red_Grad_Alpha = Gradient_Base_Level - Gradient_Full_Effect;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set values for the blue gradient
alarm[1] = Gradient_Time;
if(Blue_Grad_Dir == 1)
{
     Blue_Grad_Dir = -1;
     Blue_Grad_Alpha = Gradient_Base_Level;
}
else
{
    Blue_Grad_Dir = 1;
    Blue_Grad_Alpha = Gradient_Base_Level - Gradient_Full_Effect;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Timer for switching between classes
CanSwitchClass = true;          //The player can now switch classes again.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Background effect code
Blue_Grad_Alpha += Blue_Grad_Dir * (Gradient_Full_Effect  / Gradient_Time);
Red_Grad_Alpha += Red_Grad_Dir * (Gradient_Full_Effect  / Gradient_Time);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step based on menu mode
script_execute(myMenuMode);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the background effects
draw_sprite_ext(Blue_Grad, 0, room_width / 2, room_height / 2, 1,1,0,c_white, Blue_Grad_Alpha);       //Blue gradient
draw_sprite_ext(Red_Grad, 0, room_width / 2, room_height / 2, 1,1,0,c_white, Red_Grad_Alpha);        //Red gradient
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw based on the different mode
script_execute(myDrawMode);   //Execute the draw event
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
