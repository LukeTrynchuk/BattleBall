<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup Player Class Choose screen

enum ChoosingMode
{
    CLASS,
    PERK,
    FIGHT
};

global.Player1Gun = "Pistol";
global.Player2Gun = "Pistol";

enum PlayerChoosing
{
    PLAYER_1,
    PLAYER_2
}

myPlayer_Choosing = PlayerChoosing.PLAYER_1;
myChoosing_State = ChoosingMode.CLASS;          //Set the current selecting type

x = room_width / 3 - 160;                             //Set the x position
y = room_height / 3 - 50;                            //Set the y position

gp_id = 0;                                      //The gamepad id

CurrentClass = 0;                               //Which class is currently selected?
ClassOpacity = InitOpacity(4,0.5,CurrentClass);     //1. Pistol
                                                    //2. Machine Gun
                                                    //3. Minigun
                                                    //4. Sniper
                                          
TotalNumPerks = 6;                      
CurrentPerk = -1;                               //-1 because we don't want to be choosing a perk yet. Pick the class first.
PerkOpacity = InitOpacity(TotalNumPerks,0.3,CurrentPerk);   //Set the perk opacity
                           
PerksLeft = 2;                                  //The number of allowed perks
for(var CurrentPerk = 0; CurrentPerk &lt; TotalNumPerks; CurrentPerk++)
{
    global.ChosenPerks[CurrentPerk] = false;
}
    
for(var CurrentPerk = 0; CurrentPerk &lt; TotalNumPerks; CurrentPerk++)
{
    global.ChosenPerksP2[CurrentPerk] = false;
}

SpriteWidth = 70;                              //The width of the graphic for each class
SpriteHeight = 70;                             //The height of the graphic for each class

ControlScale = 0.3;

CanSwitchClass = true;                          //Can the player switch classes again?
SwitchTimer = room_speed * 0.15;                 //The time between switches

DisplayInst = instance_create(room_width * 0.83 , y, Obj_ClassPlayer);

MovementInst = instance_create(room_width * 0.78, y + 125,Obj_Bar);
PowerInst = instance_create(room_width * 0.78, y + 150, Obj_Bar);
RateOfFireInst = instance_create(room_width * 0.78, y+175, Obj_Bar); 

audio_em = audio_emitter_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Timer for switching between classes
CanSwitchClass = true;          //The player can now switch classes again.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Allow player change between classes
GetClassInput();                                             //Get the users input

//Class opacities
if(myChoosing_State == ChoosingMode.CLASS)
{
    ClassOpacity[CurrentClass] = 0.5;
    CurrentClass = SetOpacityIndex(array_length_1d(ClassOpacity),CurrentClass);                      //Set the class opacities
    ClassOpacity[CurrentClass] = 1.0;
    SetBars();
}
else if (myChoosing_State == ChoosingMode.PERK)
{
    PerkOpacity[CurrentPerk] = 0.5;
    CurrentPerk = SetOpacityIndex(array_length_1d(PerkOpacity),CurrentPerk);                        //Set the perk opacities
    FindValidPerk();                                                                                //Will loop till finds valid perk
    PerkOpacity[CurrentPerk] = 1.0;
}



if(confirm &amp;&amp; CanSwitchClass)
{
    CanSwitchClass = false;
    alarm[0] = SwitchTimer;

    if(myChoosing_State == ChoosingMode.CLASS)
    {
        SwitchPlayerGun();
    
        ChangeWeapon();
        
        CurrentPerk = 0;
        myChoosing_State = ChoosingMode.PERK;
        ClassOpacity = SetValues(ClassOpacity, 0.1);
        ClassOpacity[CurrentClass] = 0.8;
        SetDisplayGun();
        
        audio_emitter_pitch(audio_em,random_range(0.95,1.05));
        audio_emitter_gain(audio_em, 0.05);
        audio_play_sound_on(audio_em, snd_classSwitch, false,2);

    }
    else if (myChoosing_State == ChoosingMode.PERK)
    {       
        PerksLeft--;
        if(myPlayer_Choosing = PlayerChoosing.PLAYER_1) global.ChosenPerks[CurrentPerk] = true;
        if(myPlayer_Choosing = PlayerChoosing.PLAYER_2) global.ChosenPerksP2[CurrentPerk] = true;
        FindValidPerk();
        
        audio_emitter_pitch(audio_em,random_range(0.95,1.05));
        audio_emitter_gain(audio_em, 0.05);
        audio_play_sound_on(audio_em, snd_perkSwitch, false,2);

        
        if(PerksLeft == 0) myChoosing_State = ChoosingMode.FIGHT;                                                                              //Go to the next room
    }
    else if (myChoosing_State == ChoosingMode.FIGHT)
    {
        if(myPlayer_Choosing == PlayerChoosing.PLAYER_1)
        {
            myPlayer_Choosing = PlayerChoosing.PLAYER_2;
            gp_id = 1;
            
            PerksLeft = 2;
            PerkOpacity = SetValues(PerkOpacity,0.5);
            myChoosing_State = ChoosingMode.PERK;
            
            PerkOpacity = SetValues(PerkOpacity,0.1);
            ClassOpacity = SetValues(ClassOpacity,0.5);
        
            PerksLeft = 2;
            ClassOpacity[CurrentClass] = 1.0;
            myChoosing_State = ChoosingMode.CLASS;
            
            with(DisplayInst)
            {
                Gun = noone;
            }
        
            audio_emitter_pitch(audio_em,random_range(0.95,1.05));
            audio_emitter_gain(audio_em, 0.05);
            audio_play_sound_on(audio_em, snd_fight, false,2);
            
        }
        else
        {
            room_goto_next();
        }
    }
}
else if (back &amp;&amp; CanSwitchClass)
{
    CanSwitchClass = false;
    alarm[0] = SwitchTimer;

    if(myChoosing_State = ChoosingMode.PERK)
    {
        with(DisplayInst)
        {
            Gun = noone;
        }
        
        PerkOpacity = SetValues(PerkOpacity,0.1);
        ClassOpacity = SetValues(ClassOpacity,0.5);
        global.ChosenPerks = SetValues(global.ChosenPerks,false);
        
        PerksLeft = 2;
        ClassOpacity[CurrentClass] = 1.0;
        myChoosing_State = ChoosingMode.CLASS;
        
        audio_emitter_pitch(audio_em,random_range(0.95,1.05));
        audio_emitter_gain(audio_em, 0.05);
        audio_play_sound_on(audio_em, snd_cancel, false,2);
    }
    else if (myChoosing_State = ChoosingMode.FIGHT)
    {
        PerksLeft = 2;
        
        if(myPlayer_Choosing == PlayerChoosing.PLAYER_1) global.ChosenPerks = SetValues(global.ChosenPerks,false);
        if(myPlayer_Choosing == PlayerChoosing.PLAYER_2) global.ChosenPerksP2 = SetValues(global.ChosenPerksP2,false);
        
        PerkOpacity = SetValues(PerkOpacity,0.5);
        myChoosing_State = ChoosingMode.PERK;
        
        audio_emitter_pitch(audio_em,random_range(0.95,1.05));
        audio_emitter_gain(audio_em, 0.05);
        audio_play_sound_on(audio_em, snd_cancel, false,2);
    }
    else
    {
        audio_emitter_pitch(audio_em,random_range(0.95,1.05));
        audio_emitter_gain(audio_em, 0.05);
        audio_play_sound_on(audio_em, snd_error, false,2);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the different classes

Choose_Class_Font();                                                                            //Change our font

if(myChoosing_State == ChoosingMode.CLASS)
{
    draw_text(x + 20 + SpriteWidth, y - SpriteHeight,"Choose Class");                           //Draw the instructions "Choose Class"
}

draw_sprite_ext(B_Button_360,0,20, room_height - 20,ControlScale,ControlScale,0,c_white,1);     //Draw the B Button graphic
draw_sprite_ext(A_Button_360,0,20, room_height - 50,ControlScale,ControlScale,0,c_white,1);    //Draw the A Button Graphic

draw_text(42,room_height - 30,"Back");                                                          //"Back" for B button
draw_text(42,room_height - 60,"Confirm");                                                      //"Confirm" for A button

draw_sprite_ext(Seperator, 0,x - 25,y + 70,320,3,0,c_white,1);                                       //Draw the seperator between perks and class
draw_sprite_ext(Seperator, 0,room_width / 3 * 2,0,3,room_height,0,c_white,1);               //Draw the seperator between the customization and the stats
draw_sprite_ext(Seperator, 0,room_width / 3 * 2,room_height / 3 * 2,room_width / 3,3,0,c_white,1);               //Draw the seperator between the customization and the stats

//======================================DRAW CLASS ICONS============================================================
draw_sprite_ext(PistolClass,0,x,y,0.7,0.7,0,c_white,ClassOpacity[0]);                                       //Draw class icons
draw_sprite_ext(MachineGunClass,0,x + (1 * SpriteWidth) + 20 * 1,y,0.7,0.7,0,c_white,ClassOpacity[1]);
draw_sprite_ext(MinigunClass,0,x  + (2 * SpriteWidth) + 20 * 2,y,0.7,0.7,0,c_white,ClassOpacity[2]);
draw_sprite_ext(SniperClass,0,x  + (3 * SpriteWidth) + 20 * 3,y,0.7,0.7,0,c_white,ClassOpacity[3]);

//=====================================================DRAW PERK ICONS==================================================================

if(myChoosing_State == ChoosingMode.PERK || myChoosing_State == ChoosingMode.FIGHT) 
{
    draw_sprite_ext(TripleJumpPerk,0,x,y + SpriteHeight + 100,0.7,0.7,0,c_white, PerkOpacity[0]);                                       //Draw perk icons
    draw_sprite_ext(RateOfFirePerk,0,x + (1 * SpriteWidth) + 20 * 1,y + SpriteHeight + 100,0.7,0.7,0,c_white, PerkOpacity[1]);
    draw_sprite_ext(ExtraExplosivePerk,0,x  + (2 * SpriteWidth) + 20 * 2,y + SpriteHeight + 100,0.7,0.7,0,c_white, PerkOpacity[2]);
    draw_sprite_ext(DashCooldownPerk,0,x  + (3 * SpriteWidth) + 20 * 3,y + SpriteHeight + 100,0.7,0.7,0,c_white, PerkOpacity[3]);
    
    draw_sprite_ext(Aim8DirPerk,0,x,y + SpriteHeight + 150 + 40, 0.7,0.7,0,c_white,PerkOpacity[4]);
    draw_sprite_ext(SmashPerk,0,x + (1 * SpriteWidth) + 20 * 1, y + SpriteHeight + 150 + 40, 0.7,0.7,0,c_white,PerkOpacity[5]);
    
    
    draw_text(x + SpriteWidth + 35,y + SpriteHeight + 15,"Perks : " + string(PerksLeft));                                                                                 //Display how many perks left
    
    switch(CurrentClass)
    {
        case 0:
            draw_text(x + 20 + SpriteWidth, y - SpriteHeight,"Class : Light");
            break;
        case 1:
            draw_text(x + 20 + SpriteWidth, y - SpriteHeight,"Class : Gunsman");
            break;
        case 2:
            draw_text(x + 20 + SpriteWidth, y - SpriteHeight,"Class : Heavy");
            break;
        case 3:
            draw_text(x + 20 + SpriteWidth, y - SpriteHeight,"Class : Recon");
            break;
    }
    
    Draw_ChosenPerks();
}

draw_text(room_width / 3 * 2 + 10,y + 108,"Movement :");                                                            //"Back" for B button
draw_text(room_width / 3 * 2 + 10,y + 133,"Power :");                                                               //"Confirm" for A button
draw_text(room_width / 3 * 2 + 10,y + 158,"Fire Rate :");                                                           //"Confirm" for A button

if(myChoosing_State == ChoosingMode.FIGHT)
{
    draw_sprite_ext(Fight,0,room_width / 3,room_height - 40,0.4,0.4,0,c_white, 1);
}
else
{
    draw_sprite_ext(Fight,1,room_width / 3,room_height - 40,0.4,0.4,0,c_white, 1);
}

switch(myPlayer_Choosing)
{
    case PlayerChoosing.PLAYER_1:
        draw_sprite_ext(Player1_Choose, 0, x + 240,y - 60,1,1,0,c_white,1);
        break;
    case PlayerChoosing.PLAYER_2:
        draw_sprite_ext(Player2_Choose, 0,x + 240,y - 60,1,1,0,c_white,1);
        break;
}









</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
